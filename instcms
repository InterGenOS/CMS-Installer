#!/bin/bash
# -------------------------------------------------------
# CMS-Installer:   Installs choice CMS on a cPanel server
# CMS-Installer Version:   2.1
# URL: http://cms-installer.ml
# Github: https://github.com/InterGenOS/CMS-Installer
# ---------------------------------------------------
# InterGenStudios:   5-16-15 
# Copyright (c) 2015:   Christopher 'InterGen' Cork   InterGenStudios
# URL: https://intergenstudios.com
# --------------------------------
# License: GPL-2.0+
# URL: http://opensource.org/licenses/gpl-license.php
# ---------------------------------------------------
# CMS-Installer is free software:
# You may redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your discretion)
# any later version.
# ------------------

#-------------#
# To Do List: #
#-------------#
# 1) Start cPanel plugin gui development
#  )
#  )

#------------------------------#
# BEGIN VARIABLE DOCUMENTATION #
#------------------------------#

# 1 - Initially used to hold arguments for flow control, then during checks throughout
# 2 - Initially used to hold arguments for flow control, then during checks throughout
# 3 - Initially used to hold arguments for flow control, then during checks throughout
# API_PASS - Holds root password - used in RPASS_VALIDATE (), PURGE_DATABASE (), PURGE_DATABASE_USER (), INSTALL_DB ()
# API_USER - Placeholder for 'root' (may be redundant) - used in RPASS_VALIDATE (), PURGE_DATABASE (), PURGE_DATABASE_USER (), INSTALL_DB ()
# BACKUP - Holds choice y/n in BACKUP_OPTION ()
# CMS - Holds full name of target CMS - used in CONFIRM_INSTALL (), CONVERT_CMS_TARGET (), FIRST_FUNCTION ()
# CMS_CHOICE - Holds number ID of target CMS choice for installation - used in CMS_SELECT_2 (), CMS_SELECT ()
# CMS_DB - Flag set during database installation, to trigger purge routines if needed - used in initial variable declarations, PURGE_DATABASE (), PURGE_DATABASE_USER (), INSTALL_DB ()
# CMS_DBU - Flag set during database installation, to trigger purge routines if needed - used in initial variable declarations, PURGE_DATABASE (), PURGE_DATABASE_USER (), INSTALL_DB ()
# CMS_FILES - Flag set during database installation, to trigger purge routines if needed - used in initial variable declarations, PURGE_INSTALL_FILES (), INSTALL_WP (), INSTALL_JM (), INSTALL_DR ()
# CMS_TARGET - Holds target CMS argument/choice flag, Used in LIST_ACCTS (), CONFIRM_INSTALL (), CMS_SELECT_2 (), CMS_SELECT (), CONVERT_CMS_TARGET (), FIRST_FUNCTION (), and in initial script
# DB_NAME - Holds name of database created with API calls, Used in PURGE_DATABASE (), INSTALL_DB (), INSTALL_WP (), INSTALL_JM (), INSTALL_DR ()
# DB_PREFIX - Sets account name as prefix for database{user}, Used in INSTALL_DB ()
# DBU_NAME - Holds database username, Used in PURGE_DATABASE_USER (), INSTALL_DB (), INSTALL_WP (), INSTALL_JM (), INSTALL_DR ()
# DBU_PASS - Holds database user password, Used in INSTALL_DB (), INSTALL_WP (), INSTALL_JM (), INSTALL_DR ()
# DIR - Used in checking for pre-existing data in target docroot, Used in CHECK_EXISTING_DATA ()
# DOMAIN_CHOICE - Holds selection of target domain, Used in LIST_ACCTS ()
# DR_CV - Holds current Drupal release #, Used in initial variable declarations, HELPTEXT (), INSTALL_DR (), CMS_SELECT_2 (), CMS_SELECT ()
# EXISTS - Holds name of identified pre-existing CMS installation, Used in BACKUP_OPTION (), EXISTING_INSTALL_WARN (), CHECK_EXISTING_INSTALL ()
# expire - Holds paste URL life-span in minutes, Used in INSTALL_JM (), INSTALL_DR ()
# FILE - Empty variable used in existing data check, Used in CHECK_EXISTING_DATA ()
# FIRST_CHOICE - Holds intial selection of flow control, Used in FIRST_FUNCTION ()
# HTACCESS_WARN - Holds flag for an identified htaccess file in maindomain during subdomain installation, Used in SUBDOMAIN_HT_CHECK (), HT_CHECK_WARN ()
# JM_CV - Holds current Joomla release #, Used in initial variable declarations, HELPTEXT (), INSTALL_JM (), CMS_SELECT_2 (), CMS_SELECT ()
# name - Holds name of paste URL creator, Used in INSTALL_JM (), INSTALL_DR ()
# NC - Holds regex variable for integers, Used in initial variable declarations, LIST_ACCTS ()
# OPTION1 - 
# RETRY
# SERVER - Holds server IP -
# SUBDOMAIN
# TARGET - Holds name of target Domain/Subdomain -
# TARGET_ACCT - Holds target cPanel account name - 
# TARGET_PATH - Holds target web docroot -
# TARGET_TYPE
# vers - Holds CMS-Installer version number, Used in initial variable declarations, HELPTEXT (), HEADER (), VERSION ()
# WP_CV - Holds current WordPress release #, Used in initial variable declarations, HELPTEXT (), INSTALL_WP (), CMS_SELECT_2 (), CMS_SELECT ()

#----------------------------#
# END VARIABLE DOCUMENTATION #
#----------------------------#


#-------------------------------------#
# BEGIN INITIAL VARIABLE DECLARATIONS #
#-------------------------------------#

NC='^[0-9]+$' # Regex check for numbers as choices
SERVER="$(/sbin/ifconfig | awk '/^eth/ { printf("%s\t",$1) } /inet addr:/ { gsub(/.*:/,"",$2); if ($2 !~ /^127/) print $2; }' | head -1)" # Set server IP for script
API_USER=root # Set user as root for {script,API Calls} - probably redundant I suppose
CMS_FILES=0 # Flag for purge functions
CMS_DB=0 # Flag for purge functions
CMS_DBU=0 # Flag for purge functions
WP_CV="$(curl -sI https://wordpress.org/latest.tar.gz | grep -Po "wordpress-(.*).tar.gz" |sed 's/wordpress-//g'|cut -d. -f1-3)"
# ^ Sets latest WordPress version
JM_CV="$(curl -sA "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5" -shttp://www.joomla.org/download.html |grep -Po "Joomla_(?:\d*\.?\d+\.?\d+)\-Stable\-Full\_Package\.zip" | grep -Po "(?:\d*\.?\d+\.?\d+)" |tr "\n" "\n")"
# ^ Sets latest Joomla version
DR_CV="$(curl -s https://www.drupal.org/project/drupal | grep -Po "drupal\-(?:\d*\.?\d+\.?\d+).tar.gz" | grep -Po "(?:\d*\.?\d+\.?\d+)" |tr "\n" "\n" | head -1)"
# ^ Sets latest Drupal version
vers=2.1 # CMS-Installer version

#-----------------------------------#
# END INITIAL VARIABLE DECLARATIONS #
#-----------------------------------#

#------------------------#
# BEGIN SCRIPT FUNCTIONS #
#------------------------#

trap bashtrap INT

bashtrap () {
    clear
    HEADER
    SEPARATOR
    RED
    printf "\n\n"
    echo "CTRL+C detected in terminal... halting installation..."
    echo
    echo "Removing CMS Installation Files..."
    echo
    PURGE_INSTALL_FILES
    echo "Removing CMS Database and User..."
    echo
    PURGE_DATABASE
    PURGE_DATABASE_USER
    WHITE
    echo "Installation removed, exiting..."
    echo
    printf "\n\n"
    SEPARATOR
    printf "\n\n\n\n\n"
    exit 0
} # Ran if CTRL+C is sent

PURGE_INSTALL_FILES () { 
WHITE
if [ "$CMS_FILES" = "1" ]; then
        if [ -d "$TARGET_PATH"cgi-bin ]; then
            mv "$TARGET_PATH"cgi-bin ../
            rm -rf ./* && rm -rf ./.??*
            mv /home/"$TARGET_ACCT"/cgi-bin "$TARGET_PATH"
        else
            rm -rf "$TARGET_PATH"* && rm -rf "$TARGET_PATH".??*
        fi
fi
} # Purges any files installed if bashtrap is triggered, provided the 'CMS_FILES' flag has been set

PURGE_DATABASE () {
WHITE
if [ "$(echo $CMS_DB)" = "1" ]; then
    curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/jsonapi/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=deletedb&db=$DB_NAME"
fi
} # Purges any database created during installation if bashtrap is triggered, provided the 'CMS_DB' flag has been set

PURGE_DATABASE_USER () {
WHITE
if [ "$(echo $CMS_DBU)" = "1" ]; then
    curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=deletedbuser&dbuser=$DBU_NAME"
fi
} # Purges any database user created during installation if bashtrap is triggered, provided the 'CMS_DBU' flag has been set

RED () {
tput bold
tput setaf 1
} # Colors trailing text Red

GREEN () {
tput bold
tput setaf 2
} # Colors trailing text Green

YELLOW () {
tput bold
tput setaf 3
} # Colors trailing text Yellow

BLUE () {
tput bold
tput setaf 4
} # Colors trailing text Blue

WHITE () {
tput sgr0
} # Clears any preceding text color declarations

SEPARATOR () {
echo
BLUE
echo "============================================================================"
echo
WHITE
} # Simple divider

HEADER () {
echo
GREEN
echo "============================================================================"
WHITE
echo "  CMS-INSTALLER v.$vers"
GREEN
echo "============================================================================"
WHITE
printf "\n\n"
} # Creates uniform look during script execution by being called after any clear command

HELPTEXT () {
clear
HEADER
GREEN
echo "CMS-Installer help:"
echo
echo "Installs choice CMS in target domain/subdomain docroot"
echo
echo "USAGE: "
WHITE
echo "instcms {[options],[domain_name],[cms]} / [cms] [domain_name] / [cms] [domain_name] [rootpass]"
GREEN
echo "-------"
echo "Options:"
echo
WHITE
echo "-h: print this screen and exit"
echo "-l: list accounts available for installation"
echo "-v: show the current installer version and exit"
echo
GREEN
echo "CMS:"
echo
WHITE
echo "-w: install WordPress Version $WP_CV"
echo "-j: install Joomla Version $JM_CV"
echo "-d: install Drupal Version $DR_CV"
printf "\n\n"
exit 0
} # Shows available usage options

VERSION () {
clear
SEPARATOR
if [ "$(figlet -v | head -1 | awk '{print $2}')" = "Copyright" ]; then
    BLUE
    figlet CMS-Installer
    WHITE
else
    GREEN
    echo " CMS-Installer"
fi
echo
BLUE
echo " InterGenStudios"
WHITE
echo
echo " Internet: https://intergenstudios.com"
echo
echo " Email: <info@intergenstudios.com>"
echo
echo " Github: https://github.com/InterGenOS/CMS-Installer"
echo
echo " Version: $vers"
SEPARATOR
echo
exit 0
} # Propaganda splash screen - with flair if the server has figlet installed

LIST_ACCTS () {
clear
HEADER
GREEN
echo "Preparing domain list for CMS Installation..."
sleep 1
SEPARATOR
WHITE
grep ':' /etc/userdomains | grep -v nobody | awk '{print $1}' | cut -d ':' -f 1 | sort > domainlist
sed = domainlist | sed 'N;s/\n/\t/' > domainchoices # Sed command to add line numbers to the list of available domains/subdomains
cat domainchoices
SEPARATOR
echo
echo -n "Select Domain for CMS Installation [q for quit]? " # Giving them a quick out
read DOMAIN_CHOICE
if [ "$DOMAIN_CHOICE" = Q ]; then # Need to review how to set both upper and lower case as a single check- this is probably redundant
    printf "\n\n"
    echo "Quiting..."
    rm -rf domainlist domainchoices
    printf "\n\n"
    exit 0
else
    if [ "$DOMAIN_CHOICE" = q ]; then
        printf "\n\n"
        echo "Quiting..."
        rm -rf domainlist domainchoices
        printf "\n\n"
        exit 0
    else
        if ! [[ $DOMAIN_CHOICE =~ $NC ]]; then # Loop the script if an invalid choice is given
            echo
            RED
            echo "\"$DOMAIN_CHOICE\" is not a valid selection."
            echo
            echo "Restarting..."
            sleep 1
            LIST_ACCTS
        else
            TARGET="$(grep -m 1 "$DOMAIN_CHOICE" domainchoices | awk '{print $2}')" # Setting 1st match (-m 1) ensures $ doesn't confuse grep when there's also $$, $$$, $$$$, etc
            rm -rf domainlist domainchoices
            CHECK_RPASS # Validates given root password prior to doing anything
            RPASS_VALIDATE
            if [ ! -n "$CMS_TARGET" ]; then 
	            CMS_SELECT_2
	            CONVERT_CMS_TARGET
                TARGET_CHECK # Send flow to CMS selection if none has been chosen yet
            else
                TARGET_CHECK # Send them to target verification if CMS has already been selected
            fi
        fi
    fi
fi
} # Creates numbered list of domains for installation target options

BACKUP_OPTION () {
echo
WHITE
echo "Would you like to make a backup of"
echo
GREEN
echo "$TARGET_PATH"
echo
WHITE
echo "move it to "
echo
BLUE
echo "/root/support/scripts/CMS-Installer_backups/"
echo
WHITE
echo -n "and run the installer again [y/N]? " 
read BACKUP
if [[ "$(echo $BACKUP)" == "y" ]] || [[ "$(echo $BACKUP)" == "Y" ]]; then 
    clear
    HEADER
    GREEN
    echo "Backing up $TARGET_PATH..."
    mkdir -p /root/support/scripts/CMS-Installer_backups # Set up the backup directory
    WHITE
    echo "(this may take a moment)"
    if [ "$(echo $EXISTS)" = "WORDPRESS" ]; then
        mysqldump "$(grep DB "$TARGET_PATH"wp-config.php | cut -d "'" -f 4 | head -1)" > "$TARGET_PATH""$TARGET_ACCT"_"$EXISTS".sql # Grabs the wordpress database for the backup
    else
        if [ "$(echo $EXISTS)" = "DRUPAL" ]; then
            mysqldump "$(grep -A 5 "$databases = array (" "$TARGET_PATH"sites/default/settings.php | grep "'database'" | awk '{print $3}' | sed -e "s/'//g" -e "s/,//")" > "$TARGET_PATH""$TARGET_ACCT"_"$EXISTS".sql # Grabs the drupal database for the backup
        else
            if [ "$(echo $EXISTS)" = "JOOMLA" ]; then
                mysqldump "$(grep "public \$db =" "$TARGET_PATH"/configuration.php | awk '{print $4}' | sed -e "s/'//g" -e "s/;//")" > "$TARGET_PATH""$TARGET_ACCT"_"$EXISTS".sql # grabs the joomla database for the backup
            fi
        fi
    fi
    tar zcf "$TARGET_ACCT"_"$EXISTS"_backup.tar.gz "$TARGET_PATH" &&
    mv "$TARGET_ACCT"_"$EXISTS"_backup.tar.gz /root/support/scripts/CMS-Installer_backups/ && # Put the backup away for safe-keeping
    echo
    clear
    HEADER
    GREEN
    echo "Backup of the $EXISTS installation in $TARGET_PATH complete."
    echo
    echo "Clearing $TARGET_PATH for new installation..."
    rm -rf "$TARGET_PATH"* && rm -rf "$TARGET_PATH".??* &&
    mkdir "$TARGET_PATH"cgi-bin && chown "$TARGET_ACCT":"$TARGET_ACCT" "$TARGET_PATH"cgi-bin
    echo 
    echo "$TARGET_PATH cleared."
    echo
    echo "Restarting installer..."
    sleep 2
    unset EXISTS
    CONFIRM_INSTALL # Loop once the backup is completed
else
    clear
    HEADER
    WHITE
    echo "Without backing up and moving the current data in"
    echo "$TARGET_PATH the installer cannot continue."
    echo 
    echo "Exiting..."
    echo
    exit 0 # Backup or get out
    fi
} # David said I had to make this, so 'Tah-dah!'

EXISTING_INSTALL_WARN () {
clear
HEADER
YELLOW
echo "--------"
RED
echo "WARNING!"
YELLOW
echo "--------"
RED
echo
echo "$EXISTS installation exists in $TARGET_PATH."
echo
BACKUP_OPTION
} # Notifies the user if an installation is detected in target docroot

CHECK_EXISTING_DATA () {
FILE=""
DIR="$TARGET_PATH"

if [ "$(ls -A $DIR | grep -v cgi)" ]; then
    clear
    HEADER
    YELLOW
    echo "--------"
    RED
    echo "WARNING!"
    YELLOW
    echo "--------"
    RED
    echo
    echo "Data exists in $TARGET_PATH."
    echo
    WHITE
    echo "Would you like to make a backup of"
    echo
    GREEN
    echo "$TARGET_PATH"
    echo
    WHITE
    echo "move it to "
    echo
    BLUE
    echo "/root/support/scripts/CMS-Installer_backups/"
    echo
    WHITE
    echo -n "and run the installer again [y/N]? " 
    read BACKUP
    if [[ "$(echo $BACKUP)" == "y" ]] || [[ "$(echo $BACKUP)" == "Y" ]]; then
        clear
        HEADER
        GREEN
        echo "Backing up $TARGET_PATH..."
        WHITE
        echo "(this may take a moment)"
        sleep 1
        mkdir -p /root/support/scripts/CMS-Installer_backups
        tar zcf "$TARGET"_backup.tar.gz "$TARGET_PATH" &&
        mv "$TARGET"_backup.tar.gz /root/support/scripts/CMS-Installer_backups/ &&
        echo
        clear
        HEADER
        GREEN
        echo "Backup of the data in $TARGET_PATH complete."
        echo
        echo "Clearing $TARGET_PATH for new installation..."
        rm -rf "$TARGET_PATH"* && rm -rf "$TARGET_PATH".??* &&
        mkdir "$TARGET_PATH"cgi-bin && chown "$TARGET_ACCT":"$TARGET_ACCT" "$TARGET_PATH"cgi-bin
        echo 
        echo "$TARGET_PATH cleared."
        echo
        echo "Restarting installer..."
        sleep 2
        CONFIRM_INSTALL
    else
        clear
        HEADER
        WHITE
        echo "Without backing up and moving the current data in"
        echo "$TARGET_PATH the installer cannot continue."
        echo 
        echo "Exiting..."
        echo
        exit 0
    fi
fi
} # Same routine as the installation check and backup, but for data other than wordpress/joomla/drupal installations. Need to have it generically look for database info and grab it if it's there.


CHECK_EXISTING_INSTALL () {
if [ -f "$TARGET_PATH"wp-config.php ]; then
    EXISTS=WORDPRESS
    EXISTING_INSTALL_WARN
else
    if [ -f "$TARGET_PATH"configuration.php ]; then
        EXISTS=JOOMLA
        EXISTING_INSTALL_WARN
    else
        if [ -f "$TARGET_PATH"sites/default/settings.php ]; then
            EXISTS=DRUPAL
            EXISTING_INSTALL_WARN
        else
            clear
            HEADER
            GREEN
            echo "Target path confirmed for installation."
            sleep 1
            WHITE
        fi
    fi
fi
} # IDs any wordpress/joomla/drupal installations that are already present in target docroot

GET_MAINDOMAIN_PATH () {
TARGET_ACCT="$(grep "$TARGET" /etc/trueuserdomains | cut -d ' ' -f 2)"
TARGET_PATH=/home/"$TARGET_ACCT"/public_html/
} # Sets target docroot and cpanel account for a main domain docroot installation

GET_SUBDOMAIN_PATH () {
TARGET_ACCT="$(grep "$TARGET" /etc/userdomains | cut -d ' ' -f 2)"
TARGET_PATH="$(grep -A 2 "$TARGET" /usr/local/apache/conf/httpd.conf | grep Document | awk '{print $2}')"/
} # Sets target docroot and cpanel account for a subdomain docroot installation

CONFIRM_INSTALL () {
clear
HEADER
GREEN
printf "Install %s" "$CMS"
printf " for account "
WHITE
printf "%s" "$TARGET_ACCT"
GREEN
printf " in the "
WHITE
printf "%s" "$TARGET"
GREEN
if [ "$TARGET_TYPE" = "MAINDOMAIN" ]; then
    printf " domain, is that correct "
else
    printf " subdomain, is that correct "
fi
WHITE
echo -n "[y/n]? "
old_stty_cfg=$(stty -g)
stty raw -echo
OPTION1=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty "$old_stty_cfg"
if echo "$OPTION1" | grep -iq "^y" ;then
    printf "\n\n"
    if [ "$CMS_TARGET" = "-w" ]; then
        INSTALL_WP
    else
        if [ "$CMS_TARGET" = "-j" ]; then
            INSTALL_JM
        else
            if [ "$CMS_TARGET" = "-d" ]; then
                INSTALL_DR
            fi
        fi
    fi
    else
        printf "\n\n" # Quick out if they see an incorrect choice listed
        clear
        HEADER
        RED
        echo "Installation aborted..."
        echo
        echo "Exiting now."
        printf "\n\n"
        exit 0
    fi
} # Affirming choices prior to actually doing anything

CHECK_RPASS () {
clear
HEADER
GREEN
printf "Please enter your server's root password"
WHITE
echo -n ":"
read API_PASS
printf "\n\n\n"
clear
} # Get server's root password prior to actually doing anything- keeps things from getting messy if it's wrong when database installation time comes

RPASS_VALIDATE () {
curl -sk -X GET -u "$API_USER":"$API_PASS" https://"$SERVER":2087/json-api/listaccts?api.version=1 > rpasscheck
# ^ API call just to make sure root password is correct
    if [[ ! -z $(grep "error" rpasscheck) ]]; then
        clear
        HEADER
        RED
        echo "The root password entered is invalid."
        printf "\n\n\n"
        WHITE
        read -p "Would you like to enter it again [y/n]? " RETRY # Quick loop option if bad root pass detected
            case ${RETRY:0:1} in
                y|Y )
                    echo
                    echo "Restarting..."
                    sleep 2
                    CHECK_RPASS;;
                * )
                    tput bold
                    tput setaf 1
                    echo "Exiting..."
                    WHITE
                    printf "\n\n";;
            esac
    else
        clear
        HEADER
        GREEN
        echo "Root password accepted."
        WHITE
        echo
        sleep 2
    fi
rm -rf rpasscheck
} # Validate root password prior to actually doing anything- keeps things from getting messy if it's wrong when database installation time comes

INSTALL_DB_ERROR () {
clear
HEADER
RED
echo "cPanel API call errors reported."
echo
printf "Review the logs at"
WHITE
printf " /root/support/scripts/CMS-Installer_logs/"
RED
printf " for more information."
printf "\n\n"
WHITE
echo "Purging any database/user installations"
PURGE_DATABASE
PURGE_DATABASE_USER
echo
echo "Exiting..."
rm -rf ./*validation
exit 0
} # Something bad has happened to cause this

INSTALL_DB () {
clear
HEADER
GREEN
echo Creating CMS Database and DatabaseUser via WHM API...
echo
sleep 2

DB_PREFIX="$(echo "$TARGET_ACCT" | cut -c1-8)"
DB_NAME="$DB_PREFIX"_cmsi"$(date +%s | sha256sum | base64 | head -c 3)" &&
if [ "$(echo $(mysql -e "show databases;" | awk '{print $1}' | grep -m 1 "$DB_NAME"))" = "$DB_NAME" ]; then
    DB_NAME="$DB_NAME"1
fi
DBU_NAME="$DB_PREFIX"_"$(date +%s | sha256sum | base64 | head -c 5)" &&
if [ "$(echo $(mysql -e "select user from mysql.user;" | awk '{print $1}' | grep -m 1 "$DBU_NAME"))" = "$DBU_NAME" ]; then
    DBU_NAME="$DBU_NAME"1
fi
DBU_PASS="$(date +%s | sha256sum | base64 | head -c 10)"
WHITE
curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=createdb&db=$DB_NAME" && CMS_DB=1
# ^ API call to create the database, and command to set purge flag
curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=createdbuser&dbuser=$DBU_NAME&password=$DBU_PASS" > dbvalidation && CMS_DBU=1
# ^ API call to create the database user and password, command to dump output into a file for error checking, and command to set purge flag
curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=setdbuserprivileges&db=$DB_NAME&dbuser=$DBU_NAME&privileges=ALL%20PRIVILEGES" > dbuvalidation
# ^ API call to associate database user to database in cPanel database cache and map, command to dump output to a file for error checking, and command to set purge flag
curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=setdbuserprivileges&db=$DB_NAME&dbuser=$DBU_NAME&privileges=ALL%20PRIVILEGES" > dbivalidation
# ^ API call to verify association, and command to dump output to a file for error checking
    if [ -n "$(grep "error" dbvalidation)" ]; then # Check for errors in database creation
        RED
        echo
        echo "dbvalidation error reported"
        echo
        cat dbvalidation
        sleep 1
        INSTALL_DB_ERROR
    elif [ -n "$(grep "error" dbuvalidation)" ]; then # Check for errors in database user creation
        RED
        echo
        echo "dbuvalidation error reported"
        echo
        cat dbuvalidation
        sleep 1
        INSTALL_DB_ERROR
    elif [ -n "$(grep "error" dbivalidation)" ]; then # Check for errors in user-database association
        RED
        echo
        echo "dbivalidation error reported"
        echo
        cat dbivalidation
        sleep 1
        INSTALL_DB_ERROR
    else
        clear
        HEADER
        GREEN
        echo "ALL WHM API calls completed successfully."
        sleep 2
    fi
rm -rf ./*validation # Remove database/user creation error checking logs
}

SUBDOMAIN_HT_CHECK () {
if [ "$TARGET_TYPE" = "SUBDOMAIN" ]; then
    if [ -e /home/"$TARGET_ACCT"/public_html/.htaccess ]; then
        if [[ ! -z $(grep -i rewriterule /home/"$TARGET_ACCT"/public_html/.htaccess) ]]; then
            HTACCESS_WARN=YES
        else
            HTACCESS_WARN=NO
        fi
    fi
fi
} # Checks for rewrite rules in htaccess files of main domain if installing into subdomain, and sets flag if any are found

HT_CHECK_WARN () {
if [ "$(echo "$HTACCESS_WARN")" = "YES" ]; then
    RED
    echo "----------------------------------------------------------------"
    YELLOW
    printf "         >>>>>>>>>>>>>>>  "
    RED
    printf "WARNING!"
    YELLOW
    printf " <<<<<<<<<<<<<<<<<\n"
    RED
    echo "----------------------------------------------------------------"
    YELLOW
    echo
    echo ".htaccess file in primary domain docroot contains rewrite rules!"
    WHITE
    echo
    echo "check http://$TARGET prior to presenting it to customer"
    RED
    echo "----------------------------------------------------------------"
    WHITE
fi
} # Notifies user of any htaccess file rewrite rules in main domain if installing into subdomain

INSTALL_WP () {
CHECK_EXISTING_INSTALL
CHECK_EXISTING_DATA
SUBDOMAIN_HT_CHECK
cd "$TARGET_PATH"
clear
HEADER
GREEN
echo "Fetching WordPress files..."
echo
wget -q https://wordpress.org/latest.tar.gz && CMS_FILES=1
echo "Moving WordPress files into place..."
sleep 2
tar xf latest.tar.gz &&
mv wordpress/* .
INSTALL_DB
cp wp-config-sample.php wp-config.php
sed -i -e "s/database_name_here/$DB_NAME/" -e "s/username_here/$DBU_NAME/" -e "s/password_here/$DBU_PASS/" wp-config.php
    if [ "$TARGET_TYPE" = MAINDOMAIN ]; then # Begin fixperms style corrections- making sure all files are owned properly, with correct permissions
        find /home/"$TARGET_ACCT"/public_html -type d -exec chmod 755 {} \;
        find /home/"$TARGET_ACCT"/public_html -type f | xargs -d$'\n' -r chmod 644
        find /home/"$TARGET_ACCT"/public_html -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" /home/"$TARGET_ACCT"/public_html/*
        find /home/"$TARGET_ACCT"/* -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
    else
        for SUBDOMAIN in $(grep -i document /var/cpanel/userdata/"$TARGET_ACCT"/* | awk '{print $2}' | grep home | grep -v public_html)
        do
        find "$SUBDOMAIN" -type d -exec chmod 755 {} \;
        find "$SUBDOMAIN" -type f | xargs -d$'\n' -r chmod 644
        find "$SUBDOMAIN" -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" "$SUBDOMAIN"
        find "$SUBDOMAIN" -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \; # End fixperms style corrections- making sure all files are owned properly, with correct permissions
        done
    fi
/usr/local/cpanel/scripts/restartsrv_httpd
clear
HEADER
GREEN
printf "WordPress %s" "$WP_CV"
printf " has been installed for"
WHITE
echo " $TARGET"
echo
WHITE
HT_CHECK_WARN # Prints htaccess warning if flag was set by SUBDOMAIN_HT_CHECK
echo
echo "Provide the following URL to your customer"
echo
echo "so they can finalize their installation:"
echo
GREEN
printf "==>  "
WHITE
printf "http://%s" "$TARGET"
printf "\n\n\n"
rm -rf wordpress/ latest.tar.gz
exit 0
} # Installs the WordPress CMS, and provides URL for customer to finalize the installation

INSTALL_JM () {
CHECK_EXISTING_INSTALL
CHECK_EXISTING_DATA
if [[ "$(php -v | awk '{print $2}' | grep 5)" < "5.3.1" ]]; then
    clear
    HEADER
    RED
    echo
    echo "WARNING!"
    echo
    WHITE
    echo "Joomla requires PHP Version 5.3.1 or higher."
    echo
    echo "Please check the additional requirements here"
    echo "prior to running the installer again: https://docs.joomla.org/J3.x:Installing_Joomla"
    echo
    echo "Installation cannot continue."
    echo
    echo "Exiting..."
    sleep 3
    exit 0
fi
SUBDOMAIN_HT_CHECK
cd "$TARGET_PATH"
clear
HEADER
GREEN
echo "Fetching Joomla files..."
echo
wget -q https://github.com/joomla/joomla-cms/releases/download/"$JM_CV"/Joomla_"$JM_CV"-Stable-Full_Package.zip && CMS_FILES=1
echo "Moving Joomla files into place..."
unzip -q Joomla_"$JM_CV"-Stable-Full_Package.zip &&
rm -rf Joomla_"$JM_CV"-Stable-Full_Package.zip
INSTALL_DB
    if [ "$TARGET_TYPE" = MAINDOMAIN ]; then # Begin fixperms style corrections- making sure all files are owned properly, with correct permissions
        find /home/"$TARGET_ACCT"/public_html -type d -exec chmod 755 {} \;
        find /home/"$TARGET_ACCT"/public_html -type f | xargs -d$'\n' -r chmod 644
        find /home/"$TARGET_ACCT"/public_html -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" /home/"$TARGET_ACCT"/public_html/*
        find /home/"$TARGET_ACCT"/* -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
    else
        for SUBDOMAIN in $(grep -i document /var/cpanel/userdata/"$TARGET_ACCT"/* | awk '{print $2}' | grep home | grep -v public_html)
        do
        find "$SUBDOMAIN" -type d -exec chmod 755 {} \;
        find "$SUBDOMAIN" -type f | xargs -d$'\n' -r chmod 644
        find "$SUBDOMAIN" -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" "$SUBDOMAIN"
        find "$SUBDOMAIN" -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \; # End fixperms style corrections- making sure all files are owned properly, with correct permissions
        done
    fi
/usr/local/cpanel/scripts/restartsrv_httpd
cat > jdbinfo << "EOF" # BEGIN pastefile template for database information presentation to customer
==============================================
          Joomla JM_CV Installation
              Step (2) Database
            Configuration Details

Domain: DOMAIN
URL: http://TARGET

Database Type*: (leave default)

Host Name*:     (leave default)

Username*:       DBU

Password*:       PASS

Database Name*:  DB

Table Prefix*:  (leave default)

Old Database    (leave default)
    Process*

    **Please use or make note of this data
    immediately- this paste will expire in
                120 minutes**

==============================================
EOF # END pastefile template for database information presentation to customer
sed -i -e "s/DOMAIN/$TARGET/" -e "s/JM_CV/$JM_CV/" -e "s/TARGET/$TARGET/" -e "s/DBU/$DBU_NAME/" -e "s/PASS/$DBU_PASS/" -e "s/DB/$DB_NAME/" jdbinfo # Adds database info into template
curl -d name=JoomlaInstaller -d expire=120 --data-urlencode text@jdbinfo -s http://nobits.ml/api/create > tempaste # Creates paste for database info using 'stikked'
sed -i -e 's/view/view\/raw/' tempaste # converts 'stikked' paste to raw output URL
clear
HEADER
GREEN
printf "The %s" "$CMS"
printf " CMS Version %s" "$JM_CV"
printf " has been installed for"
WHITE
echo " $TARGET"
echo
WHITE
HT_CHECK_WARN # Prints htaccess warning if flag was set by SUBDOMAIN_HT_CHECK
echo
echo "Provide the Database Info URL to your customer"
GREEN
echo "(needed for finalizing installation)"
echo
printf "==>  "
WHITE
printf "%s" "$(cat tempaste)"
printf "\n\n"
printf "Provide the following %s" "$CMS"
printf " URL to your customer"
printf "\n"
echo "and advise them to finalize their installation:"
echo
GREEN
printf "==>  "
WHITE
printf "http://%s" "$TARGET"
printf "\n\n\n"
rm -rf jdbinfo tempaste
exit 0
} # Installs the Joomla CMS, and provides both domain URL and database info URL for customer to finalize the installation

INSTALL_DR () {
CHECK_EXISTING_INSTALL
CHECK_EXISTING_DATA
SUBDOMAIN_HT_CHECK
cd "$TARGET_PATH"
clear
HEADER
GREEN
echo "Fetching Drupal files..."
echo
wget -q http://ftp.drupal.org/files/projects/drupal-"$DR_CV".tar.gz && CMS_FILES=1
echo "Moving Drupal files into place..."
tar xf drupal-"$DR_CV".tar.gz &&
mv drupal-"$DR_CV"/* . && mv drupal-"$DR_CV"/.h* . && mv drupal-"$DR_CV"/.g* .
INSTALL_DB
cp sites/default/default.settings.php sites/default/settings.php
mkdir -p sites/default/files && chmod 755 sites/default/files
chown -R "$TARGET_ACCT":"$TARGET_ACCT" ./* # Begin fixperms style corrections- making sure all files are owned properly, with correct permissions
    if [ "$TARGET_TYPE" = MAINDOMAIN ]; then
        find /home/"$TARGET_ACCT"/public_html -type d -exec chmod 755 {} \;
        find /home/"$TARGET_ACCT"/public_html -type f | xargs -d$'\n' -r chmod 644
        find /home/"$TARGET_ACCT"/public_html -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" /home/"$TARGET_ACCT"/public_html/*
        find /home/"$TARGET_ACCT"/* -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
    else
        for SUBDOMAIN in $(grep -i document /var/cpanel/userdata/"$TARGET_ACCT"/* | awk '{print $2}' | grep home | grep -v public_html)
        do
        find "$SUBDOMAIN" -type d -exec chmod 755 {} \;
        find "$SUBDOMAIN" -type f | xargs -d$'\n' -r chmod 644
        find "$SUBDOMAIN" -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" "$SUBDOMAIN"
        find "$SUBDOMAIN" -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \; # End fixperms style corrections- making sure all files are owned properly, with correct permissions
        done
    fi
/usr/local/cpanel/scripts/restartsrv_httpd
cat > ddbinfo << "EOF" # BEGIN pastefile template for database information presentation to customer
==============================================
           Drupal DR_CV Installation
              'Set Up Database'
            Configuration Details

Domain: DOMAIN
URL: http://TARGET

Database name*:      DB

Database username*:  DBU

Database password*:  PASS

|> ADVANCED OPTIONS: (leave default)

    **Please use or make note of this data
    immediately- this paste will expire in
                120 minutes**

==============================================
EOF # END pastefile template for database information presentation to customer
sed -i -e "s/DOMAIN/$TARGET/" -e "s/DR_CV/$DR_CV/" -e "s/TARGET/$TARGET/" -e "s/DBU/$DBU_NAME/" -e "s/PASS/$DBU_PASS/" -e "s/DB/$DB_NAME/" ddbinfo # Adds database info into template
curl -d name=DrupalInstaller -d expire=120 --data-urlencode text@ddbinfo -s http://nobits.ml/api/create > tempaste # Creates paste for database info using 'stikked'
sed -i -e 's/view/view\/raw/' tempaste # converts 'stikked' paste to raw output URL
clear
HEADER
GREEN
printf "The %s" "$CMS"
printf " CMS Version %s" "$JM_CV"
printf " has been installed for"
WHITE
echo " $TARGET"
echo
WHITE
HT_CHECK_WARN # Prints htaccess warning if flag was set by SUBDOMAIN_HT_CHECK
echo
echo "Provide the Database Info URL to your customer"
GREEN
echo "(needed for finalizing installation)"
echo
printf "==>  "
WHITE
printf "%s" "$(cat tempaste)"
printf "\n\n"
printf "Provide the following %s" "$CMS"
printf " URL to your customer"
printf "\n"
echo "and advise them to finalize their installation:"
echo
GREEN
printf "==>  "
WHITE
printf "http://%s" "$TARGET"
printf "\n\n\n"
rm -rf drupal-"$DR_CV"/ drupal-"$DR_CV".tar.gz ddbinfo tempaste
exit 0
} # Installs the Drupal CMS, and provides both domain URL and database info URL for customer to finalize the installation

TARGET_CHECK () {
if [ "$(echo $TARGET)" != "$(grep $TARGET /etc/trueuserdomains | cut -d ':' -f 1)" ]; then # Flow control check for a main domain installation
    if [ "$(echo $TARGET)" != "$(grep $TARGET /etc/userdomains | cut -d ':' -f 1)" ]; then # Flow control check for a subdomain installation
        clear
        HEADER
        RED
        echo "That isn't a valid domain/subdomain on this server."
        echo
        echo "Exiting now."
        sleep 2
        HELPTEXT
    else
        TARGET_TYPE=SUBDOMAIN # Set flow control for subdomain
        GET_SUBDOMAIN_PATH # Get docroot path
        CONFIRM_INSTALL # Send to final confirmation
    fi
else
    TARGET_TYPE=MAINDOMAIN # Set flow control for maindomain
    GET_MAINDOMAIN_PATH # Get docroot path
    CONFIRM_INSTALL # Send to final confirmation
fi
}

CMS_SELECT_2 () {
clear
HEADER
GREEN
echo "Which CMS will be installed?"
echo
WHITE
echo "1) WordPress $WP_CV"
echo "2) Joomla $JM_CV"
echo "3) Drupal $DR_CV"
echo
echo -n "[enter selection]: "
read CMS_CHOICE
    case "$CMS_CHOICE" in

        1) CMS_TARGET="-w";;
        2) CMS_TARGET="-j";;
        3) CMS_TARGET="-d";;
        *) RED
           echo
           echo "Invalid selection."
           echo
           echo "Please enter the number of the CMS to install"
           sleep 2
           WHITE
           clear
           CMS_SELECT_2;;

    esac
} # Second CMS selection function for flows outside of basic FIRST_FUNCTION routines

CMS_SELECT () {
clear
HEADER
GREEN
echo "Which CMS will be installed?"
echo
WHITE
echo "1) WordPress $WP_CV"
echo "2) Joomla $JM_CV"
echo "3) Drupal $DR_CV"
echo
echo -n "[enter selection]: "
read CMS_CHOICE
    case "$CMS_CHOICE" in

        1) CMS_TARGET="-w"
           CONVERT_CMS_TARGET
           FIRST_FUNCTION;;
        2) CMS_TARGET="-j"
           CONVERT_CMS_TARGET
           FIRST_FUNCTION;;
        3) CMS_TARGET="-d"
           CONVERT_CMS_TARGET
           FIRST_FUNCTION;;
        *) RED
           echo
           echo "Invalid selection."
           echo
           echo "Please enter the number of the CMS to install"
           sleep 2
           WHITE
           clear
           CMS_SELECT;;

    esac
} # First CMS selection function used with basic flow controls and FIRST_FUNCTION routines

CONVERT_CMS_TARGET () {
if [ "$CMS_TARGET" = "-w" ]; then
    CMS=WORDPRESS
else
    if [ "$CMS_TARGET" = "-j" ]; then
        CMS=JOOMLA
    else
        if [ "$CMS_TARGET" = "-d" ]; then
            CMS=DRUPAL
        fi
    fi
fi
} # Associates CMS target flag with the actual CMS name

FIRST_FUNCTION () {
clear
HEADER
mkdir -p /root/support/scripts/CMS-Installer_logs/  # Create Installer Log directory
GREEN
if [ "$CMS_TARGET" = "-w" ]; then
    CMS=WORDPRESS
else
    if [ "$CMS_TARGET" = "-j" ]; then
        CMS=JOOMLA
    else
        if [ "$CMS_TARGET" = "-d" ]; then
            CMS=DRUPAL
        fi
    fi
fi # Associates CMS target flag with the actual CMS name
printf "Enter domain for %s" "$CMS"
printf " installation or "
WHITE
printf "'get list'"
GREEN
printf " for domain list"
WHITE
echo -n ": "
read FIRST_CHOICE
if [ "$FIRST_CHOICE" = "get list" ]; then # 2nd route to -l option, allowing domain target to be picked from numbered list
    LIST_ACCTS 2>&1 | tee /root/support/scripts/CMS-Installer_logs/instcms_log-"$(date +"%m-%d-%Y_%T")" # Creates installation log with timestamp
else
    TARGET=$FIRST_CHOICE # Allows target domain to be manually entered
    CHECK_RPASS
    RPASS_VALIDATE
    TARGET_CHECK 2>&1 | tee /root/support/scripts/CMS-Installer_logs/instcms_log-"$(date +"%m-%d-%Y_%T")" # Creates installation log with timestamp
fi
}

#----------------------#
# END SCRIPT FUNCTIONS #
#----------------------#

#-------------------#
# BEGIN CORE SCRIPT #
#-------------------#

if [ ! -n "$1" ]; then # If no arguments are given, and only 'instcms' was used at initial script call
    CMS_SELECT
elif [ ! -z "$1" ] && [ ! -n "$2" ]; then # Flow control for only 1 argument passed during initial script call
    if [ "$1" = "-h" ]; then # Flow control for '-h' as the only argument passed during initial script call
        HELPTEXT
    elif [ "$1" = "-l" ]; then # Flow control for '-l' as the only argument passed during initial script call
        LIST_ACCTS
    elif [ "$1" = "-v" ]; then # Flow control for '-v' as the only argument passed during initial script call
        VERSION
    elif [ "$1" = "-w" ] || [ "$1" = "-j" ] || [ "$1" = "-d" ]; then # Flow control for either '-j', '-w', or '-d' as the only argument passed during initial script call
        CMS_TARGET="$1"
        FIRST_FUNCTION
    elif [ "$(grep "$1" /usr/local/apache/conf/httpd.conf | head -1 | awk '{print $2}')" = "$1" ]; then # Flow control for target {sub}domain as the only argument passed during initial script call
        TARGET="$1"
        CMS_SELECT_2
        CONVERT_CMS_TARGET
        CHECK_RPASS
        RPASS_VALIDATE
        mkdir -p /root/support/scripts/CMS-Installer_logs/  # Create Installer Log directory
        TARGET_CHECK 2>&1 | tee /root/support/scripts/CMS-Installer_logs/instcms_log-"$(date +"%m-%d-%Y_%T")" # Creates installation log with timestamp
    else
        RED
        echo
        echo "INVALID OPTION"
        echo
        echo "Starting standard installer sequence..."
        sleep 1
        clear
        CMS_SELECT
        FIRST_FUNCTION
    fi
elif [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -n "$3" ]; then # Flow control for 2 arguments passed during initial script call
    CMS_TARGET="$1" # Per Options layout in HELPTEXT, if 2 arguments are passed- cms target should be one, followed by domain target- but we'll let the root pass be used as $2 as well
    if [ $"(grep "$2" /usr/local/apache/conf/httpd.conf | head -1 | awk '{print $2}')" = "$2"  ]; then
        TARGET="$2" # If second argument passed matches a domain in httpd conf, set it as $2
        if [ "$CMS_TARGET" = "-w" ]; then
            CMS=WORDPRESS
        elif [ "$CMS_TARGET" = "-j" ]; then
            CMS=JOOMLA
        else
            CMS=DRUPAL
        fi
        CHECK_RPASS
        RPASS_VALIDATE
        mkdir -p /root/support/scripts/CMS-Installer_logs/  # Create Installer Log directory
        TARGET_CHECK 2>&1 | tee /root/support/scripts/CMS-Installer_logs/instcms_log-"$(date +"%m-%d-%Y_%T")" # Creates installation log with timestamp
    else 
        API_PASS="$2" # If second argument didn't match a domain in httpd conf, we'll pass it along as the root pass- if it doesn't validate the user will be notified
        if [ "$CMS_TARGET" = "-w" ]; then
            CMS=WORDPRESS
        elif [ "$CMS_TARGET" = "-j" ]; then
            CMS=JOOMLA
        else
            CMS=DRUPAL
        fi
        RPASS_VALIDATE
        LIST_ACCTS
        mkdir -p /root/support/scripts/CMS-Installer_logs/  # Create Installer Log directory
        TARGET_CHECK 2>&1 | tee /root/support/scripts/CMS-Installer_logs/instcms_log-"$(date +"%m-%d-%Y_%T")" # Creates installation log with timestamp
    fi
elif [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -z "$3" ]; then # Flow control for 3 arguments passed during intiial script call - If one doesn't match up down the line, the user will be notified
    CMS_TARGET="$1" # Per Options layout in HELPTEXT, if 3 arguments are passed $1 is the cms target
    TARGET="$2" # Per Options layout in HELPTEXT, if 3 arguments are passed $2 is the target {sub}domain
    API_PASS="$3" # Per Options layout in HELPTEXT, if 3 arguments are passed $3 is the root password of the server
    if [ "$CMS_TARGET" = "-w" ]; then
        CMS=WORDPRESS
    elif [ "$CMS_TARGET" = "-j" ]; then
        CMS=JOOMLA
    else
        CMS=DRUPAL
    fi
    RPASS_VALIDATE
    mkdir -p /root/support/scripts/CMS-Installer_logs/  # Create Installer Log directory
    TARGET_CHECK 2>&1 | tee /root/support/scripts/CMS-Installer_logs/instcms_log-"$(date +"%m-%d-%Y_%T")" # Creates installation log with timestamp
else # Flow control for too many options entered
    printf "\n\n"
    RED
    echo "INVALID OPTION(s) ENTERED"
    echo
    sleep 1
    WHITE
    echo "Starting standard installer sequence..."
    sleep 1
    clear
    CMS_SELECT
    FIRST_FUNCTION
fi 

#-----------------#
# END CORE SCRIPT #
#-----------------#

#-------------------------#
# BEGIN POST SCRIPT NOTES #
#-------------------------#

#unset CMS_TARGET TARGET API_PASS CMS 1 2 3 FIRST_CHOICE CMS_CHOICE WP_CV JM_CV DR_CV TARGET_TYPE name expire TARGET_ACCT SUBDOMAIN CMS_FILES TARGET_PATH DBU_NAME DB_NAME DBU_PASS HTACCESS_WARN API_USER SERVER CMS_DB DB_PREFIX RETRY OPTION1 EXISTS BACKUP DIR FILE DOMAIN_CHOICE NC vers CMS_DBU
#exit 0
#
# For use in Create Account feature:
# curl -sk -X GET -u "$API_USER":"$API_PASS" https://"$SERVER":2087/json-api/createacct?api.version=1&username="$NEW_USERNAME"&domain="$NEW_DOMAIN_NAME"&password="$NEW_PASSWORD"&ip="$DEDICATED_IP"&contactemail="$USER_EMAIL"&dkim="$USE_DKIM"&spf="$USE_SPF"

#-----------------------#
# END POST SCRIPT NOTES #
#-----------------------#