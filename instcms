#!/bin/bash
# CMS-Installer - Installs choice CMS on a cPanel server
# InterGen - 5-16-15
#
# To Do List:
# -----------
# !) Add 'backup & remove' if installation exists
# 2) Set up check and adjustment for already existing database
# 3) Improve error checking during API calls
# 4) Completely automate Joomla & Drupal installation
# 5) Start cPanel plugin gui development

WP_CV="$(curl -sI https://wordpress.org/latest.tar.gz | grep -Po "wordpress-(.*).tar.gz" |sed 's/wordpress-//g'|cut -d. -f1-3)"
JM_CV="$(curl -A "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5" -s http://www.joomla.org/download.html |grep -Po "Joomla_(?:\d*\.?\d+\.?\d+)\-Stable\-Full\_Package\.zip" | grep -Po "(?:\d*\.?\d+\.?\d+)" |tr "\n" "\n")"
DR_CV="$(curl -s https://www.drupal.org/project/drupal | grep -Po "drupal\-(?:\d*\.?\d+\.?\d+).tar.gz" | grep -Po "(?:\d*\.?\d+\.?\d+)" |tr "\n" "\n" | head -1)"
vers=1.9



trap bashtrap INT

bashtrap () {
    clear
    HEADER
    SEPARATOR
    RED
    printf "\n\n"
    echo "CTRL+C detected in terminal... halting installation..."
    echo
    echo "Removing CMS Installation Files..."
    echo
    PURGE_INSTALL_FILES
    echo "Removing CMS Database and User..."
    echo
    PURGE_DATABASE
    PURGE_DATABASE_USER
    WHITE
    echo "Installation removed, exiting..."
    echo
    printf "\n\n"
    SEPARATOR
    printf "\n\n\n\n\n"
    exit 0
}

NC='^[0-9]+$' #RE check for numbers as choices
SERVER="$(/sbin/ifconfig | awk '/^eth/ { printf("%s\t",$1) } /inet addr:/ { gsub(/.*:/,"",$2); if ($2 !~ /^127/) print $2; }' | head -1)"
API_USER=root
CMS_FILES=0
CMS_DB=0
CMS_DBU=0

PURGE_INSTALL_FILES () {
WHITE
if [ "$CMS_FILES" = "1" ]; then
    cd "$TARGET_PATH"
        if [ -d "cgi-bin" ]; then
            mv cgi-bin/ ../
            rm -rf ./* && rm -rf ./.??*
            mv ../cgi-bin/ .
        else
            rm -rf ./* && rm -rf ./.??*
        fi
fi
}

PURGE_DATABASE () {
WHITE
if [ "$CMS_DB" = "1" ]; then
    curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?    
cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=deletedb&db=$DB_NAME"
fi
}

PURGE_DATABASE_USER () {
WHITE
if [ "$CMS_DBU" = "1" ]; then
    curl -sk -X GET -u "$API_USER":"$API_PASS" 
"https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=deletedbuser&dbuser=$DBU_NAME"
fi
}

RED () {
tput bold
tput setaf 1
}

GREEN () {
tput bold
tput setaf 2
}

YELLOW () {
tput bold
tput setaf 3
}

BLUE () {
tput bold
tput setaf 4
}

WHITE () {
tput sgr0
}

SEPARATOR () {
echo
BLUE
echo "============================================================================"
echo
WHITE
}

HEADER () {
echo
GREEN
echo "============================================================================"
WHITE
echo "  CMS-INSTALLER v.$vers"
GREEN
echo "============================================================================"
WHITE
printf "\n\n"
}

HELPTEXT () {
clear
HEADER
GREEN
echo "CMS-Installer help:"
echo
echo "Installs choice CMS in target domain/subdomain docroot"
echo
echo "USAGE: "
WHITE
echo "instcms {[options],[domain_name],[cms]} / [cms] [domain_name] / [cms] [domain_name] [rootpass]"
GREEN
echo "-------"
echo "Options:"
echo
WHITE
echo "-h: print this screen and exit"
echo "-l: list accounts available for installation"
echo "-v: show the current installer version and exit"
echo
GREEN
echo "CMS:"
echo
WHITE
echo "-w: install WordPress Version $WP_CV"
echo "-j: install Joomla Version $JM_CV"
echo "-d: install Drupal Version $DR_CV"
printf "\n\n"
exit 0
}

VERSION () {
clear
SEPARATOR
if [ "$(figlet -v | head -1 | awk '{print $2}')" = "Copyright" ]; then
    BLUE
    figlet CMS-Installer
    WHITE
else
    GREEN
    echo " CMS-Installer"
fi
echo
BLUE
echo " InterGenStudios"
WHITE
echo
echo " Internet: https://intergenstudios.com"
echo
echo " Email: <info@intergenstudios.com>"
echo
echo " Github: https://github.com/InterGenOS/CMS-Installer"
echo
echo " Version: $vers"
SEPARATOR
echo
exit 0
}

LIST_ACCTS () {
clear
HEADER
GREEN
echo "Preparing domain list for CMS Installation..."
sleep 1
SEPARATOR
WHITE
grep ':' /etc/userdomains | grep -v nobody | awk '{print $1}' | cut -d ':' -f 1 | sort > domainlist
sed = domainlist | sed 'N;s/\n/\t/' > domainchoices
cat domainchoices
SEPARATOR
echo
echo -n "Select Domain for CMS Installation [q for quit]? "
read DOMAIN_CHOICE
if [ "$DOMAIN_CHOICE" = Q ]; then
    printf "\n\n"
    echo "Quiting..."
    rm -rf domainlist domainchoices
    printf "\n\n"
    exit 0
else
    if [ "$DOMAIN_CHOICE" = q ]; then
        printf "\n\n"
        echo "Quiting..."
        rm -rf domainlist domainchoices
        printf "\n\n"
        exit 0
    else
        if ! [[ $DOMAIN_CHOICE =~ $NC ]]; then
            echo
            RED
            echo "\"$DOMAIN_CHOICE\" is not a valid selection."
            echo
            echo "Restarting..."
            sleep 1
            LIST_ACCTS
        else
            TARGET="$(grep -m 1 "$DOMAIN_CHOICE" domainchoices | awk '{print $2}')"
            rm -rf domainlist domainchoices
            CHECK_RPASS
            RPASS_VALIDATE
            if [ ! -n "$CMS_TARGET" ]; then 
	            CMS_SELECT_2
	            CONVERT_CMS_TARGET
                TARGET_CHECK
            else
                TARGET_CHECK
            fi
        fi
    fi
fi
}

EXISTING_INSTALL_WARN () {
clear
HEADER
SEPARATOR
RED
echo "WARNING!"
echo
echo "$EXISTS installation exists in $TARGET_PATH."
echo
echo "Please clean the target directory and run the installer again."
echo
echo "Exiting..."
echo
SEPARATOR
printf "\n\n"
WHITE
exit 0
}

CHECK_EXISTING_DATA () {
FILE=""
DIR="$TARGET_PATH"

if [ "$(ls -A $DIR | grep -v cgi)" ]; then
     clear
     HEADER
     SEPARATOR
     RED
     echo "WARNING!"
     echo
     echo "Data exists in $TARGET_PATH."
     echo
     echo "Please clean the target directory and run the installer again."
     echo
     echo "Exiting..."
     echo
     SEPARATOR
     printf "\n\n"
     WHITE
fi
}


CHECK_EXISTING_INSTALL () {
if [ -e "$TARGET_PATH"wp-config.php ]; then
    EXISTS=WORDPRESS
    EXISTING_INSTALL_WARN
else
    if [ -e "$TARGET_PATH"joomla.xml ]; then
        EXISTS=JOOMLA
        EXISTING_INSTALL_WARN
    else
        if [ -e "$TARGET_PATH"COPYRIGHT.txt ]; then
            EXISTS=DRUPAL
            EXISTING_INSTALL_WARN
        else
            clear
            HEADER
            GREEN
            echo "Target path confirmed for installation."
            WHITE
        fi
    fi
fi
}

GET_MAINDOMAIN_PATH () {
TARGET_ACCT="$(grep "$TARGET" /etc/trueuserdomains | cut -d ' ' -f 2)"
TARGET_PATH=/home/"$TARGET_ACCT"/public_html/
}

GET_SUBDOMAIN_PATH () {
TARGET_ACCT="$(grep "$TARGET" /etc/userdomains | cut -d ' ' -f 2)"
TARGET_PATH="$(grep -A 2 "$TARGET" /usr/local/apache/conf/httpd.conf | grep Document | awk '{print $2}')"
}

CONFIRM_INSTALL () {
clear
HEADER
GREEN
printf "Install %s" "$CMS"
printf " for account "
WHITE
printf "%s" "$TARGET_ACCT"
GREEN
printf " in the "
WHITE
printf "%s" "$TARGET"
GREEN
if [ "$TARGET_TYPE" = "MAINDOMAIN" ]; then
    printf " domain, is that correct "
else
    printf " subdomain, is that correct "
fi
WHITE
echo -n "[y/n]? "
old_stty_cfg=$(stty -g)
stty raw -echo
OPTION1=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty "$old_stty_cfg"
if echo "$OPTION1" | grep -iq "^y" ;then
    printf "\n\n"
    if [ "$CMS_TARGET" = "-w" ]; then
        INSTALL_WP
    else
        if [ "$CMS_TARGET" = "-j" ]; then
            INSTALL_JM
        else
            if [ "$CMS_TARGET" = "-d" ]; then
                INSTALL_DR
            fi
        fi
    fi
    else
        printf "\n\n"
        clear
        HEADER
        RED
        echo "Installation aborted..."
        echo
        echo "Exiting now."
        printf "\n\n"
        exit 0
    fi
}

CHECK_RPASS () {
clear
HEADER
GREEN
printf "Please enter your server's root password"
WHITE
echo -n ":"
read API_PASS
printf "\n\n\n"
clear
}

RPASS_VALIDATE () {
curl -k -X GET -u "$API_USER":"$API_PASS" https://"$SERVER":2087/json-api/listaccts?api.version=1 > rpasscheck
    if [[ ! -z $(grep "error" rpasscheck) ]]; then
        clear
        HEADER
        RED
        echo "The root password entered is invalid."
        printf "\n\n\n"
        WHITE
        read -p "Would you like to enter it again [y/n]? " RETRY
            case ${RETRY:0:1} in
                y|Y )
                    echo
                    echo "Restarting..."
                    sleep 2
                    CHECK_RPASS;;
                * )
                    tput bold
                    tput setaf 1
                    echo "Exiting..."
                    WHITE
                    printf "\n\n";;
            esac
    else
        clear
        HEADER
        GREEN
        echo "Root password accepted."
        WHITE
        echo
        sleep 2
    fi
rm -rf rpasscheck
}

INSTALL_DB () {
clear
HEADER
GREEN
echo Creating CMS Database and DatabaseUser via WHM API...
echo
sleep 2

DB_PREFIX="$(echo "$TARGET_ACCT" | cut -c1-8)"
DB_NAME="$DB_PREFIX"_cmsi &&
if [ "$(mysql -e "show databases;" | awk '{print $1}' | grep -m 1 "$DB_NAME")" = "$DB_NAME" ]; then
    DB_NAME="$DB_NAME"1
fi
DBU_NAME="$DB_NAME"u &&
if [ "$(mysql -e "select user from mysql.user;" | awk '{print $1}' | grep -m 1 "$DBU_NAME")" = "$DBU_NAME" ]; then
    DBU_NAME="$DBU_NAME"1
fi
DBU_PASS="$(date +%s | sha256sum | base64 | head -c 10)"
WHITE
curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=createdb&db=$DB_NAME" && CMS_DB=1

curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=createdbuser&dbuser=$DBU_NAME&password=$DBU_PASS" && CMS_DBU=1

curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=setdbuserprivileges&db=$DB_NAME&dbuser=$DBU_NAME&privileges=ALL%20PRIVILEGES"

curl -sk -X GET -u "$API_USER":"$API_PASS" "https://$SERVER:2087/json-api/cpanel?cpanel_jsonapi_apiversion=2&cpanel_jsonapi_user=$TARGET_ACCT&cpanel_jsonapi_module=MysqlFE&cpanel_jsonapi_func=setdbuserprivileges&db=$DB_NAME&dbuser=$DBU_NAME&privileges=ALL%20PRIVILEGES" > dbvalidation
    if [[ ! -z $(grep "error" dbvalidation) ]]; then
        clear
        HEADER
        RED
        echo "cPanel API call errors reported."
        echo
        printf "Review the logs at"
        WHITE
        printf " /root/support/scripts/DevelopmentScripts/Inst_cms_logs/"
        RED
        printf " for more information."
        printf "\n\n"
        WHITE
        echo "Purging any database/user creations"
        PURGE_DATABASE
        PURGE_DATABASE_USER
        echo
        echo "Exiting..."
        exit 0
    else
        clear
        HEADER
        GREEN
        echo "ALL WHM API calls completed successfully."
        sleep 2
    fi
rm -rf dbvalidation
}

SUBDOMAIN_HT_CHECK () {
if [ "$TARGET_TYPE" = "SUBDOMAIN" ]; then
    if [ -e /home/"$TARGET_ACCT"/public_html/.htaccess ]; then
        if [[ ! -z $(grep -i rewriterule /home/"$TARGET_ACCT"/public_html/.htaccess) ]]; then
            HTACCESS_WARN=YES
        else
            HTACCESS_WARN=NO
        fi
    fi
fi
}

HT_CHECK_WARN () {
if [ "$(echo "$HTACCESS_WARN")" = "YES" ]; then
    RED
    echo "----------------------------------------------------------------"
    YELLOW
    printf "         >>>>>>>>>>>>>>>  "
    RED
    printf "WARNING!"
    YELLOW
    printf " <<<<<<<<<<<<<<<<<\n"
    RED
    echo "----------------------------------------------------------------"
    YELLOW
    echo
    echo ".htaccess file in primary domain docroot contains rewrite rules!"
    WHITE
    echo
    echo "check http://$TARGET prior to presenting it to customer"
    RED
    echo "----------------------------------------------------------------"
    WHITE
fi
}

INSTALL_WP () {
CHECK_EXISTING_INSTALL
CHECK_EXISTING_DATA
SUBDOMAIN_HT_CHECK
cd "$TARGET_PATH"
clear
HEADER
GREEN
echo "Fetching WordPress files..."
echo
wget -q https://wordpress.org/latest.tar.gz && CMS_FILES=1
echo "Moving WordPress files into place..."
sleep 2
tar xf latest.tar.gz &&
mv wordpress/* .
INSTALL_DB
cp wp-config-sample.php wp-config.php
sed -i -e "s/database_name_here/$DB_NAME/" -e "s/username_here/$DBU_NAME/" -e "s/password_here/$DBU_PASS/" wp-config.php
    if [ "$TARGET_TYPE" = MAINDOMAIN ]; then
        find /home/"$TARGET_ACCT"/public_html -type d -exec chmod 755 {} \;
        find /home/"$TARGET_ACCT"/public_html -type f | xargs -d$'\n' -r chmod 644
        find /home/"$TARGET_ACCT"/public_html -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" /home/"$TARGET_ACCT"/public_html/*
        find /home/"$TARGET_ACCT"/* -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
    else
        for SUBDOMAIN in $(grep -i document /var/cpanel/userdata/"$TARGET_ACCT"/* | awk '{print $2}' | grep home | grep -v public_html)
        do
        find "$SUBDOMAIN" -type d -exec chmod 755 {} \;
        find "$SUBDOMAIN" -type f | xargs -d$'\n' -r chmod 644
        find "$SUBDOMAIN" -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" "$SUBDOMAIN"
        find "$SUBDOMAIN" -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
        done
    fi
/usr/local/cpanel/scripts/restartsrv_httpd
clear
HEADER
GREEN
printf "WordPress %s" "$WP_CV"
printf " has been installed for"
WHITE
echo " $TARGET"
echo
WHITE
HT_CHECK_WARN
echo
echo "Provide the following URL to your customer"
echo
echo "so they can finalize their installation:"
echo
GREEN
printf "==>  "
WHITE
printf "http://%s" "$TARGET"
printf "\n\n\n"
rm -rf wordpress/ latest.tar.gz
exit 0
}

INSTALL_JM () {
CHECK_EXISTING_INSTALL
CHECK_EXISTING_DATA
if [[ "$(php -v | awk '{print $2}' | grep 5)" < "5.3.1" ]]; then
    clear
    HEADER
    RED
    echo
    echo "WARNING!"
    echo
    WHITE
    echo "Joomla requires PHP Version 5.3.1 or higher."
    echo
    echo "Please check the additional requirements here"
    echo "prior to running the installer again: https://docs.joomla.org/J3.x:Installing_Joomla"
    echo
    echo "Installation cannot continue."
    echo
    echo "Exiting..."
    sleep 3
    exit 0
fi
SUBDOMAIN_HT_CHECK
cd "$TARGET_PATH"
clear
HEADER
GREEN
echo "Fetching Joomla files..."
echo
wget https://github.com/joomla/joomla-cms/releases/download/"$JM_CV"/Joomla_"$JM_CV"-Stable-Full_Package.zip && CMS_FILES=1
echo "Moving Joomla files into place..."
sleep 1
unzip -q Joomla_"$JM_CV"-Stable-Full_Package.zip &&
rm -rf Joomla_"$JM_CV"-Stable-Full_Package.zip
INSTALL_DB
    if [ "$TARGET_TYPE" = MAINDOMAIN ]; then
        find /home/"$TARGET_ACCT"/public_html -type d -exec chmod 755 {} \;
        find /home/"$TARGET_ACCT"/public_html -type f | xargs -d$'\n' -r chmod 644
        find /home/"$TARGET_ACCT"/public_html -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" /home/"$TARGET_ACCT"/public_html/*
        find /home/"$TARGET_ACCT"/* -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
    else
        for SUBDOMAIN in $(grep -i document /var/cpanel/userdata/"$TARGET_ACCT"/* | awk '{print $2}' | grep home | grep -v public_html)
        do
        find "$SUBDOMAIN" -type d -exec chmod 755 {} \;
        find "$SUBDOMAIN" -type f | xargs -d$'\n' -r chmod 644
        find "$SUBDOMAIN" -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" "$SUBDOMAIN"
        find "$SUBDOMAIN" -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
        done
    fi
/usr/local/cpanel/scripts/restartsrv_httpd
clear
cat > jdbinfo << "EOF"
==============================================
          Joomla JM_CV Installation
              Step (2) Database
            Configuration Details

Domain: DOMAIN
URL: http://TARGET

Database Type*: (leave default)

Host Name*:     (leave default)

Username*:       DBU

Password*:       PASS

Database Name*:  DB

Table Prefix*:  (leave default)

Old Database    (leave default)
    Process*

    **Please use or make note of this data
    immediately- this paste will expire in
                120 minutes**

==============================================
EOF
sed -i -e "s/DOMAIN/$TARGET/" -e "s/JM_CV/$JM_CV/" -e "s/TARGET/$TARGET/" -e "s/DBU/$DBU_NAME/" -e "s/PASS/$DBU_PASS/" -e "s/DB/$DB_NAME/" jdbinfo
curl -d name=JoomlaInstaller -d expire=120 --data-urlencode text@jdbinfo http://nobits.ml/api/create > tempaste
sed -i -e 's/view/view\/raw/' tempaste
HEADER
GREEN
printf "The %s" "$CMS"
printf " CMS Version %s" "$JM_CV"
printf " has been installed for"
WHITE
echo " $TARGET"
echo
WHITE
HT_CHECK_WARN
echo
echo "Provide the Database Info URL to your customer"
GREEN
echo "(needed for finalizing installation)"
echo
printf "==>  "
WHITE
printf "%s" "$(cat tempaste)"
printf "\n\n"
printf "Provide the following %s" "$CMS"
printf " URL to your customer"
printf "\n"
echo "and advise them to finalize their installation:"
echo
GREEN
printf "==>  "
WHITE
printf "http://%s" "$TARGET"
printf "\n\n\n"
rm -rf jdbinfo tempaste
exit 0
}

INSTALL_DR () {
CHECK_EXISTING_INSTALL
CHECK_EXISTING_DATA
SUBDOMAIN_HT_CHECK
cd "$TARGET_PATH"
clear
HEADER
GREEN
echo "Fetching Drupal files..."
echo
wget -q http://ftp.drupal.org/files/projects/drupal-"$DR_CV".tar.gz && CMS_FILES=1
echo "Moving Drupal files into place..."
sleep 1
tar xf drupal-"$DR_CV".tar.gz &&
mv drupal-"$DR_CV"/* . && mv drupal-"$DR_CV"/.h* . && mv drupal-"$DR_CV"/.g* .
INSTALL_DB
cp sites/default/default.settings.php sites/default/settings.php
mkdir -p sites/default/files && chmod 755 sites/default/files
chown -R "$TARGET_ACCT":"$TARGET_ACCT" ./*
    if [ "$TARGET_TYPE" = MAINDOMAIN ]; then
        find /home/"$TARGET_ACCT"/public_html -type d -exec chmod 755 {} \;
        find /home/"$TARGET_ACCT"/public_html -type f | xargs -d$'\n' -r chmod 644
        find /home/"$TARGET_ACCT"/public_html -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" /home/"$TARGET_ACCT"/public_html/*
        find /home/"$TARGET_ACCT"/* -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
    else
        for SUBDOMAIN in $(grep -i document /var/cpanel/userdata/"$TARGET_ACCT"/* | awk '{print $2}' | grep home | grep -v public_html)
        do
        find "$SUBDOMAIN" -type d -exec chmod 755 {} \;
        find "$SUBDOMAIN" -type f | xargs -d$'\n' -r chmod 644
        find "$SUBDOMAIN" -name '*.cgi' -o -name '*.pl' | xargs -r chmod 755
        chown -R "$TARGET_ACCT":"$TARGET_ACCT" "$SUBDOMAIN"
        find "$SUBDOMAIN" -name .htaccess -exec chown "$TARGET_ACCT"."$TARGET_ACCT" {} \;
        done
    fi
/usr/local/cpanel/scripts/restartsrv_httpd
clear
cat > ddbinfo << "EOF"
==============================================
           Drupal DR_CV Installation
              'Set Up Database'
            Configuration Details

Domain: DOMAIN
URL: http://TARGET

Database name*:      DB

Database username*:  DBU

Database password*:  PASS

|> ADVANCED OPTIONS: (leave default)

    **Please use or make note of this data
    immediately- this paste will expire in
                120 minutes**

==============================================
EOF
sed -i -e "s/DOMAIN/$TARGET/" -e "s/DR_CV/$DR_CV/" -e "s/TARGET/$TARGET/" -e "s/DBU/$DBU_NAME/" -e "s/PASS/$DBU_PASS/" -e "s/DB/$DB_NAME/" ddbinfo
curl -d name=DrupalInstaller -d expire=120 --data-urlencode text@ddbinfo http://nobits.ml/api/create > tempaste
sed -i -e 's/view/view\/raw/' tempaste
HEADER
GREEN
printf "The %s" "$CMS"
printf " CMS Version %s" "$JM_CV"
printf " has been installed for"
WHITE
echo " $TARGET"
echo
WHITE
HT_CHECK_WARN
echo
echo "Provide the Database Info URL to your customer"
GREEN
echo "(needed for finalizing installation)"
echo
printf "==>  "
WHITE
printf "%s" "$(cat tempaste)"
printf "\n\n"
printf "Provide the following %s" "$CMS"
printf " URL to your customer"
printf "\n"
echo "and advise them to finalize their installation:"
echo
GREEN
printf "==>  "
WHITE
printf "http://%s" "$TARGET"
printf "\n\n\n"
rm -rf drupal-"$DR_CV"/ drupal-"$DR_CV".tar.gz ddbinfo tempaste
exit 0
}

TARGET_CHECK () {
if [ "$TARGET" != "$(grep "$TARGET" /etc/trueuserdomains | cut -d ':' -f 1)" ]; then
    if [ "$TARGET" != "$(grep "$TARGET" /etc/userdomains | cut -d ':' -f 1)" ]; then
        clear
        HEADER
        RED
        echo "That isn't a valid domain/subdomain on this server."
        echo
        echo "Exiting now."
        sleep 2
        HELPTEXT
    else
        TARGET_TYPE=SUBDOMAIN
        GET_SUBDOMAIN_PATH
        CONFIRM_INSTALL
    fi
else
    TARGET_TYPE=MAINDOMAIN
    GET_MAINDOMAIN_PATH
    CONFIRM_INSTALL
fi
}

CMS_SELECT_2 () {
clear
HEADER
GREEN
echo "Which CMS will be installed?"
echo
WHITE
echo "1) WordPress $WP_CV"
echo "2) Joomla $JM_CV"
echo "3) Drupal $DR_CV"
echo
echo -n "[enter selection]: "
read CMS_CHOICE
    case "$CMS_CHOICE" in

        1) CMS_TARGET="-w";;
        2) CMS_TARGET="-j";;
        3) CMS_TARGET="-d";;
        *) RED
           echo
           echo "Invalid selection."
           echo
           echo "Please enter the number of the CMS to install"
           sleep 2
           WHITE
           clear
           CMS_SELECT_2;;

    esac
}

CMS_SELECT () {
clear
HEADER
GREEN
echo "Which CMS will be installed?"
echo
WHITE
echo "1) WordPress $WP_CV"
echo "2) Joomla $JM_CV"
echo "3) Drupal $DR_CV"
echo
echo -n "[enter selection]: "
read CMS_CHOICE
    case "$CMS_CHOICE" in

        1) CMS_TARGET="-w"
           CONVERT_CMS_TARGET
           FIRST_FUNCTION;;
        2) CMS_TARGET="-j"
           CONVERT_CMS_TARGET
           FIRST_FUNCTION;;
        3) CMS_TARGET="-d"
           CONVERT_CMS_TARGET
           FIRST_FUNCTION;;
        *) RED
           echo
           echo "Invalid selection."
           echo
           echo "Please enter the number of the CMS to install"
           sleep 2
           WHITE
           clear
           CMS_SELECT;;

    esac
}

CONVERT_CMS_TARGET () {
if [ "$CMS_TARGET" = "-w" ]; then
    CMS=WORDPRESS
else
    if [ "$CMS_TARGET" = "-j" ]; then
        CMS=JOOMLA
    else
        if [ "$CMS_TARGET" = "-d" ]; then
            CMS=DRUPAL
        fi
    fi
fi
}

FIRST_FUNCTION () {
clear
HEADER
mkdir -p /root/support/scripts/DevelopmentScripts/Instcms_logs/  ## For Installer Logs
GREEN
if [ "$CMS_TARGET" = "-w" ]; then
    CMS=WORDPRESS
else
    if [ "$CMS_TARGET" = "-j" ]; then
        CMS=JOOMLA
    else
        if [ "$CMS_TARGET" = "-d" ]; then
            CMS=DRUPAL
        fi
    fi
fi
printf "Enter domain for %s" "$CMS"
printf " installation or "
WHITE
printf "'get list'"
GREEN
printf " for domain list"
WHITE
echo -n ": "
read FIRST_CHOICE
if [ "$FIRST_CHOICE" = "get list" ]; then
    LIST_ACCTS 2>&1 | tee /root/support/scripts/DevelopmentScripts/Instcms_logs/instcms_log-"$(date +"%T_%m-%d-%Y")"
else
    TARGET=FIRST_CHOICE
    CHECK_RPASS
    RPASS_VALIDATE
    TARGET_CHECK 2>&1 | tee /root/support/scripts/DevelopmentScripts/Instcms_logs/instcms_log-"$(date +"%T_%m-%d-%Y")"
fi
}

if [ ! -n "$1" ]; then
    CMS_SELECT
elif [ ! -z "$1" ] && [ ! -n "$2" ]; then
    if [ "$1" = "-h" ]; then
        HELPTEXT
    elif [ "$1" = "-l" ]; then
        LIST_ACCTS
    elif [ "$1" = "-v" ]; then
        VERSION
    elif [ "$1" = "-w" ] || [ "$1" = "-j" ] || [ "$1" = "-d" ]; then
        CMS_TARGET="$1"
        FIRST_FUNCTION
    elif [ "$(grep "$1" /usr/local/apache/conf/httpd.conf | head -1 | awk '{print $2}')" = "$1" ]; then
        TARGET="$1"
        CMS_SELECT_2
        CONVERT_CMS_TARGET
        CHECK_RPASS
        RPASS_VALIDATE
        mkdir -p /root/support/scripts/DevelopmentScripts/Instcms_logs/  ## For Installer Logs
        TARGET_CHECK 2>&1 | tee /root/support/scripts/DevelopmentScripts/Instcms_logs/instcms_log-"$(date +"%T_%m-%d-%Y")"
    else
        RED
        echo
        echo "INVALID OPTION"
        echo
        echo "Starting standard installer sequence..."
        sleep 1
        clear
        CMS_SELECT
        FIRST_FUNCTION
    fi
elif [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -n "$3" ]; then
    CMS_TARGET="$1"
    if [ $"(grep "$2" /usr/local/apache/conf/httpd.conf | head -1 | awk '{print $2}')" = "$2"  ]; then
        TARGET="$2"
        if [ "$CMS_TARGET" = "-w" ]; then
            CMS=WORDPRESS
        elif [ "$CMS_TARGET" = "-j" ]; then
            CMS=JOOMLA
        else
            CMS=DRUPAL
        fi
        CHECK_RPASS
        RPASS_VALIDATE
        mkdir -p /root/support/scripts/DevelopmentScripts/Instcms_logs/  ## For Installer Logs
        TARGET_CHECK 2>&1 | tee /root/support/scripts/DevelopmentScripts/Instcms_logs/instcms_log-"$(date +"%T_%m-%d-%Y")"
    else 
        API_PASS="$2"
        if [ "$CMS_TARGET" = "-w" ]; then
            CMS=WORDPRESS
        elif [ "$CMS_TARGET" = "-j" ]; then
            CMS=JOOMLA
        else
            CMS=DRUPAL
        fi
        RPASS_VALIDATE
        LIST_ACCTS
        mkdir -p /root/support/scripts/DevelopmentScripts/Instcms_logs/  ## For Installer Logs
        TARGET_CHECK 2>&1 | tee /root/support/scripts/DevelopmentScripts/Instcms_logs/instcms_log-"$(date +"%T_%m-%d-%Y")"
    fi
elif [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -z "$3" ]; then
    CMS_TARGET="$1"
    TARGET="$2"
    API_PASS="$3"
    if [ "$CMS_TARGET" = "-w" ]; then
        CMS=WORDPRESS
    elif [ "$CMS_TARGET" = "-j" ]; then
        CMS=JOOMLA
    else
        CMS=DRUPAL
    fi
    RPASS_VALIDATE
    mkdir -p /root/support/scripts/DevelopmentScripts/Instcms_logs/  ## For Installer Logs
    TARGET_CHECK 2>&1 | tee /root/support/scripts/DevelopmentScripts/Instcms_logs/instcms_log-"$(date +"%T_%m-%d-%Y")"
else
    printf "\n\n"
    RED
    echo "INVALID OPTION(s) ENTERED"
    echo
    sleep 1
    WHITE
    echo "Starting standard installer sequence..."
    sleep 1
    clear
    CMS_SELECT
    FIRST_FUNCTION
fi 